<?php

<% const crud = this.crud %>
<% const modelName = crud.model.name %>
<% const camelCase = this.require('camelCase') %>
<% const pascalCase = this.require('pascalCase') %>
<% const paramCase = this.require('paramCase') %>
<% const itemVarName = camelCase(crud.name) %>
<% const collectionVarName = camelCase(crud.plural) %>
<% const viewsFolderName = `${crud.section.getFolderName()}.${paramCase(crud.plural)}` %>

namespace <$ crud.livewireNamespace $>;
 
use Livewire\Component;
use Livewire\WithFileUploads;
use App\Models\<$ modelName $>;
// hook:IMPORTS
 
class <$ this.filenameWithoutExtension $> extends Component
{
    use WithFileUploads;
    // hook:TRAITS

    // hook:BEFORE_VARIABLES
    public <$ modelName $> $<$ itemVarName $>;
    <% for (let input of crud.getFileInputs()) { %>
    public $<$ input.getNewPropertyName() $>;
    <% } %>
    // hook:AFTER_VARIABLES

    public function rules()
    {
        // hook:BEFORE_RULES
        return [
            <% for (let input of crud.getCommonInputs()) { %>
            '<$ itemVarName $>.<$ input.column.name $>' => <$ input.getCreationRulesForTemplate() $>,
            <% } %>
            <% for (let input of crud.getFileInputs()) { %>
            '<$ input.getNewPropertyName() $>' => <$ input.getCreationRulesForTemplate() $>,
            <% } %>
            // hook:RULES
        ];
    }

    public function mount()
    {
        // hook:BEFORE_MOUNT
        $this-><$ itemVarName $> = new <$ modelName $>();
        // hook:AFTER_MOUNT
    }

    public function save()
    {
        // hook:BEFORE_SAVE
        $this->validate();
        // hook:AFTER_VALIDATE

        <% for (let input of crud.getFileInputs()) { %>
        $this->process<$ pascalCase(input.name) $>();
        <% } %>

        $this-><$ itemVarName $>->save();
        // hook:AFTER_SAVE

        return redirect()->route('<$ crud.getRouteNameByTag('edit') $>', $this-><$ itemVarName $>);
    }

    <% for (let input of crud.getFileInputs()) { %>
    <% const fieldName = input.column?.name || input.name %>
    public function process<$ pascalCase(input.name) $>()
    {
        if (empty($this-><$ input.getNewPropertyName() $>)) return;
        
        $this-><$ itemVarName $>-><$ fieldName $> = $this-><$ input.getNewPropertyName() $>->store('<$ input.getFileDiskName() $>', 'public');
    }
    <% } %>

    public function render()
    {
        // hook:BEFORE_RENDER
        return view('livewire.<$ viewsFolderName $>.create', [
            '<$ itemVarName $>' => $this-><$ itemVarName $>,
            // hook:RENDER_PARAMETERS
        ]);
    }
    // hook:METHODS
}