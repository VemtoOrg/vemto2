<?php

<% const pascalCase = this.require('pascalCase') %>

namespace App\Nova;

use Laravel\Nova\Http\Requests\NovaRequest;
<% for (let input of this.crud.getInputsForForms()) { %>
    use Laravel\Nova\Fields\<$ pascalCase(input.novaSettings.inputType) $>;
<% } %>

class <$ this.filenameWithoutExtension $> extends Resource
{
    /**
     * The model the resource corresponds to.
     *
     * @var class-string<\<$ this.crud.model.getClassString() $>>
     */
    public static $model = \<$ this.crud.model.getClassString() $>::class;

    /**
     * The single value that should be used to represent the resource when being displayed.
     *
     * @var string
     */
    public static $title = '<$ this.crud.model.table.getLabelColumnName() $>';

    <% if(!this.crud.novaSettings.displayInNavigation) { %>
        /**
         * Indicates if the resource should be displayed in the sidebar.
         *
         * @var bool
         */
        public static $displayInNavigation = false;
    <% } %>

    <% if(this.crud.novaSettings.group) { %>
        /**
         * The logical group associated with the resource.
         *
         * @var string
         */
        public static $group = '<$ this.crud.novaSettings.group $>';
    <% } %>

    <% if(this.crud.novaSettings.tableStyle != 'default') { %>
        /**
         * The visual style used for the table. Available options are 'tight' and 'default'.
         *
         * @var string
         */
        public static $tableStyle = '<$ this.crud.novaSettings.tableStyle $>';
    <% } %>

    <% if(this.crud.novaSettings.showColumnBorders) { %>
        /**
         * Whether to show borders for each column on the X-axis.
         *
         * @var bool
         */
        public static $showColumnBorders = true;
    <% } %>

    <% if(this.crud.novaSettings.clickAction != 'detail') { %>
        /**
         * The click action to use when clicking on the resource in the table.
         *
         * @var string
         */
        public static $clickAction = '<$ this.crud.novaSettings.clickAction $>';
    <% } %>

    <% if(!this.crud.novaSettings.trafficCop) { %>
        /**
         * Indicates whether Nova should check for modifications between viewing and updating a resource.
         *
         * @var bool
         */
        public static $trafficCop = false;
    <% } %>

    <% if(this.crud.novaSettings.polling) { %>
        /**
         * Indicates whether the resource should automatically poll for new resources.
         *
         * @var bool
         */
        public static $polling = true;

        <% if(this.crud.novaSettings.pollingInterval) { %>
            /**
             * The interval at which Nova should poll for new resources.
             *
             * @var int
             */
            public static $pollingInterval = <$ this.crud.novaSettings.pollingInterval $>;
        <% } %>

        <% if(this.crud.novaSettings.showPollingToggle) { %>
            /**
             * Indicates whether to show the polling toggle button inside Nova.
             *
             * @var int
             */
            public static $showPollingToggle = true;
        <% } %>
    <% } %>

    <% if(this.crud.novaSettings.debounce) { %>
        /**
         * The debounce amount (in seconds) to use when searching this resource.
         *
         * @var float
         */
        public static $debounce = 0.5; // 0.5 seconds
    <% } %>

    /**
     * The columns that should be searched.
     *
     * @var array
     */
    public static $search = [
        'id', 'name', 'email',
    ];

    /**
     * Get the fields displayed by the resource.
     *
     * @param  \Laravel\Nova\Http\Requests\NovaRequest  $request
     * @return array
     */
    public function fields(NovaRequest $request)
    {
        return [
            <% for(let input of this.crud.getInputsForForms()) { %>
                <import template="crud/views/nova/templates/NovaForm.vemtl">
            <% } %>
        ];
    }

    /**
     * Get the cards available for the request.
     *
     * @param  \Laravel\Nova\Http\Requests\NovaRequest  $request
     * @return array
     */
    public function cards(NovaRequest $request)
    {
        return [];
    }

    /**
     * Get the filters available for the resource.
     *
     * @param  \Laravel\Nova\Http\Requests\NovaRequest  $request
     * @return array
     */
    public function filters(NovaRequest $request)
    {
        return [];
    }

    /**
     * Get the lenses available for the resource.
     *
     * @param  \Laravel\Nova\Http\Requests\NovaRequest  $request
     * @return array
     */
    public function lenses(NovaRequest $request)
    {
        return [];
    }

    /**
     * Get the actions available for the resource.
     *
     * @param  \Laravel\Nova\Http\Requests\NovaRequest  $request
     * @return array
     */
    public function actions(NovaRequest $request)
    {
        return [];
    }
}