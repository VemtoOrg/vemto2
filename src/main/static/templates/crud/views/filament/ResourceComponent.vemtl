<?php

<% const pascalCase = this.require('pascalCase') %>
<% const navigationIcon = this.crud.filamentSettings.navigationIcon ?? 'heroicon-o-rectangle-stack' %>

namespace App\Filament\Resources\<$ this.crud.section.name $>;

use Filament\Forms;
use Filament\Tables;
use Filament\Forms\Form;
use Filament\Tables\Table;
use <$ this.crud.model.class $>;
use Filament\Resources\Resource;
use Illuminate\Database\Eloquent\Builder;
use App\Filament\Resources\<$ this.crud.section.name $>\<$ this.filenameWithoutExtension $>\Pages;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use App\Filament\Resources\<$ this.crud.section.name $>\<$ this.filenameWithoutExtension $>\RelationManagers;
use Filament\Forms\Components\Grid;
use Filament\Forms\Components\Section;
<% for(let input of this.crud.inputs) { %>
use Filament\Forms\Components\<$ pascalCase(input.filamentSettings.formData.inputType) $>;
use Filament\Tables\Columns\<$ pascalCase(input.filamentSettings.columnData.columnType) $>;
<% } %>

class <$ this.filenameWithoutExtension $> extends Resource
{
    protected static ?string $model = <$ this.crud.model.name $>::class;

    protected static ?string $navigationIcon = '<$ navigationIcon $>';

    <% if(this.crud.filamentSettings.recordTitle) { %>
    protected static ?string $recordTitleAttribute = '<$ this.crud.filamentSettings.recordTitle $>';
    <% } %>

    <% if(this.crud.filamentSettings.shouldSkipAuthorization) { %>
    protected static bool $shouldSkipAuthorization = '<$ this.crud.filamentSettings.shouldSkipAuthorization $>';
    <% } %>

    <% if(this.crud.filamentSettings.modelLabel) { %>
    protected static ?string $modelLabel = '<$ this.crud.filamentSettings.modelLabel $>';
    <% } %>
    
    <% if(this.crud.filamentSettings.pluralModelLabel) { %>
    protected static ?string $pluralModelLabel = '<$ this.crud.filamentSettings.pluralModelLabel $>';
    <% } %>
    
    <% if(this.crud.filamentSettings.navigationLabel) { %>
    protected static ?string $navigationLabel = '<$ this.crud.filamentSettings.navigationLabel $>';
    <% } %>

    <% if(this.crud.filamentSettings.navigationOrder) { %>
    protected static ?int $navigationSort = <$ this.crud.filamentSettings.navigationOrder $>;
    <% } %>

    <% if(this.crud.filamentSettings.navigationGroup) { %>
    protected static ?string $navigationGroup = '<$ this.crud.filamentSettings.navigationGroup $>';
    <% } %>

    <% if(this.crud.filamentSettings.slug && this.crud.filamentSettings.slug != pascalCase(this.crud.plural)) { %>
    protected static ?string $slug = '<$ this.crud.filamentSettings.slug $>';
    <% } %>

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Section::make()
                    ->schema([
                        Grid::make(['default' => 1])
                            ->schema([
                                <% for(let input of this.crud.getInputsForForms()) { %>
                                <###>
                                <% const inputFormData = input.filamentSettings.formData %>
                                <% const [inlineRules, individualRules] = input.getRulesForFilamentTemplate() %>
                                <###>
                                <$ pascalCase(inputFormData.inputType) $>::make('<$ input.name $>')
                                    <###>
                                    <% if(inlineRules.length) { %>
                                        ->rules([<$ inlineRules.join(', ') $>])
                                    <% } %>
                                    <###>
                                    <% for(let rule of individualRules) { %>
                                        <% const [methodName, args] = rule %>
                                        <# --- #>
                                        -><$ methodName $>(<$ args $>)
                                    <% } %>
                                    <# --- #>
                                    <% if(input.isBelongsTo()) { %>
                                        ->relationship('<$ input.relationship.name $>', '<$ input.relationship.relatedModel.table.getLabelColumnName() $>')
                                    <% } %>
                                    <# --- #>
                                    <% if(input.isEmail()) { %>
                                        ->email()
                                    <% } %>
                                    <# --- #>
                                    <% if(input.isPassword()) { %>
                                        ->password()
                                        ->revealable()
                                    <% } %>
                                    <# --- #>
                                    <% if(input.isNumber()) { %>
                                        ->numeric()
                                        ->step(<$ input.step $>)
                                    <% } %>
                                    <# --- #>
                                    <% if(!input.showOnCreation) { %>
                                        ->hiddenOn('create')
                                    <% } %>
                                    <# --- #>
                                    <% if(!input.showOnUpdate) { %>
                                        ->hiddenOn('edit')
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.autofocus) { %>
                                        ->autofocus()
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.helperText) { %>
                                        ->helperText('<$ inputFormData.helperText $>')
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.autoComplete === false) { %>
                                        ->autocomplete(false)
                                    <% } %>
                                    <# --- #>
                                    <% if(input.defaultValue) { %>
                                        ->default('<$ input.defaultValue $>')
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.dataList && inputFormData.dataList.length) { %>
                                        ->datalist([
                                            <% for(let option of inputFormData.dataList) { %>
                                                '<$ option $>',
                                            <% } %>
                                        ])
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.isMultiple) { %>
                                        ->multiple()
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.canBeSearchable) { %>
                                        ->searchable()
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.useCustomInput) { %>
                                        ->native(false)
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.canSelectPlaceholder === false) { %>
                                        ->selectablePlaceholder(false)
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.loadingMessage?.length) { %>
                                        ->loadingMessage('<$ inputFormData.loadingMessage $>')
                                        ->searchingMessage('<$ inputFormData.loadingMessage $>')
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.noResultMessage?.length) { %>
                                        ->noSearchResultsMessage('<$ inputFormData.noResultMessage $>')
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.searchMessage?.length) { %>
                                        ->searchPrompt('<$ inputFormData.searchMessage $>')
                                    <% } %>
                                    <# --- #>
                                    <% if(input.items?.length) { %>
                                        ->options([
                                            <% for(let option of input.items) { %>
                                                '<$ option.value $>' => '<$ option.label $>',
                                            <% } %>
                                        ])
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.disabledDates?.length) { %>
                                        ->disabledDates([
                                            <% for(let date of inputFormData.disabledDates) { %>
                                                '<$ date $>',
                                            <% } %>
                                        ])
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.inline) { %>
                                        ->inline()
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.inlineLabel) { %>
                                        ->inlineLabel()
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.dateFormat) { %>
                                        ->format('<$ inputFormData.dateFormat $>')
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.timezone) { %>
                                        ->timezone('<$ inputFormData.timezone $>')
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.disableSeconds) { %>
                                        ->seconds(false)
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.displayFormat) { %>
                                        ->displayFormat('<$ inputFormData.displayFormat $>')
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.closeOnDateSelection) { %>
                                        ->closeOnDateSelection()
                                    <% } %>
                                    <# --- #>
                                    <% if(input.readOnly && ['textarea', 'text-input', 'datetime-picker'].includes(inputFormData.inputType)) { %>
                                        ->readonly()
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.disk && ['markdown-editor', 'rich-editor'].includes(inputFormData.inputType)) { %>
                                        <% const methodName = input.isTextarea() ? 'fileAttachmentsDisk' : 'disk' %>
                                        -><$ methodName $>('<$ inputFormData.disk $>')
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.directory && ['markdown-editor', 'rich-editor'].includes(inputFormData.inputType)) { %>
                                        <% const methodName = input.isTextarea() ? 'fileAttachmentsDirectory' : 'directory' %>
                                        -><$ methodName $>('<$ inputFormData.directory $>')
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.visibility && ['markdown-editor', 'rich-editor'].includes(inputFormData.inputType)) { %>
                                        <% const methodName = input.isTextarea() ? 'fileAttachmentsVisibility' : 'visibility' %>
                                        -><$ methodName $>('<$ inputFormData.visibility $>')
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.preserveFilenames) { %>
                                        ->preserveFilenames()
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.useAvatarMode) { %>
                                        ->avatar()
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.useImageEditor) { %>
                                        ->image()
                                        ->imageEditor()
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.imageEditorAspectRatios?.length) { %>
                                        ->imageEditorAspectRatios([
                                            <% for(let ratio of inputFormData.imageEditorAspectRatios) { %>
                                                <% ratio = ratio == 'null' ? ratio : `'${ratio}'` %>
                                                <$ ratio $>,
                                            <% } %>
                                        ])
                                    <% } %>
                                    <# --- #>
                                    <% if([0, 1, 2, 3].includes(inputFormData.imageEditorMode)) { %>
                                        ->imageEditorMode(<$ inputFormData.imageEditorMode $>)
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.imageEditorViewportWidth) { %>
                                        ->imageEditorViewportWidth('<$ inputFormData.imageEditorViewportWidth $>')
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.imageEditorViewportHeight) { %>
                                        ->imageEditorViewportHeight('<$ inputFormData.imageEditorViewportHeight $>')
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.useCircleCropper) { %>
                                        ->circleCropper()
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.disablePreview) { %>
                                        ->previewable(false)
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.isDownloadable) { %>
                                        ->downloadable()
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.canOpenFilesInNewTab) { %>
                                        ->openable()
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.canReorderFiles) { %>
                                        ->reorderable()
                                        ->appendFiles()
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.disableDeleteButton) { %>
                                        ->deleteable(false)
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.rows && inputFormData.inputType === 'textarea') { %>
                                        ->rows(<$ inputFormData.rows $>)
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.cols && inputFormData.inputType === 'textarea') { %>
                                        ->cols(<$ inputFormData.cols $>)
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.hsl) { %>
                                        ->hsl()
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.rgb) { %>
                                        ->rgb()
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.rgba) { %>
                                        ->rgba()
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.autosize && inputFormData.inputType === 'textarea') { %>
                                        ->autosize()
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.exactLength && inputFormData.inputType === 'textarea') { %>
                                        ->length(<$ inputFormData.exactLength $>)
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.toolbarButtons?.length) { %>
                                        ->toolbarButtons([
                                            <% for(let buttonName of inputFormData.toolbarButtons) { %>
                                                '<$ buttonName $>',
                                            <% } %>
                                        ])
                                    <% } %>
                                    <# --- #>
                                    <% if(inputFormData.disableToolbarButtons?.length) { %>
                                        ->disableToolbarButtons([
                                            <% for(let buttonName of inputFormData.disableToolbarButtons) { %>
                                                '<$ buttonName $>',
                                            <% } %>
                                        ])
                                    <% } %>,
                                    
                                <% } %>
                            ])
                    ])
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->poll('60s')
            ->columns([
                <% for(let input of this.crud.getInputsForIndex()) { %>
                    <###>
                    <% const inputColumnData = input.filamentSettings.columnData %>
                    <% const columnName = !input.isBelongsTo() ? input.name : `${input.relationship.name}.${input.relationship.relatedModel.table.getLabelColumnName()}` %>
                    <###>
                    <$ pascalCase(inputColumnData.columnType) $>::make('<$ columnName $>')
                        <% if(input.isImage() && input.filamentSettings.formData.disk) { %>
                            ->disk('<$ input.filamentSettings.formData.disk $>')
                        <% } %>
                        <# --- #>
                        <% if(input.isImage() && input.filamentSettings.formData.visibility) { %>
                            ->visibility('<$ input.filamentSettings.formData.visibility $>')
                        <% } %>
                        <# --- #>
                        <% if(input.isTextarea()) { %>
                            ->limit(50)
                        <% } %>
                        <# --- #>
                        <% if(input.filamentSettings.formData.allowHtml) { %>
                            ->html()
                        <% } %>
                        <# --- #>
                        <% if(input.isDateOrDateTime()) { %>
                            ->since()
                        <% } %>,

                <% } %>
            ])
            ->filters([
                //
            ])
            ->actions([
                Tables\Actions\EditAction::make(),
                Tables\Actions\ViewAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\List<$ this.crud.plural $>::route('/'),
            'create' => Pages\Create<$ this.crud.name $>::route('/create'),
            'view' => Pages\View<$ this.crud.name $>::route('/{record}'),
            'edit' => Pages\Edit<$ this.crud.name $>::route('/{record}/edit'),
        ];
    }
}
