<?php

<% const pascalCase = this.require('pascalCase') %>
<% const navigationIcon = this.crud.filamentSettings.navigationIcon ?? 'heroicon-o-rectangle-stack' %>

namespace App\Filament\Resources\<$ this.crud.section.name $>;

use Filament\Forms;
use Filament\Tables;
use Filament\Forms\Form;
use Filament\Tables\Table;
use <$ this.crud.model.class $>;
use Filament\Resources\Resource;
use Illuminate\Database\Eloquent\Builder;
use App\Filament\Resources\<$ this.crud.section.name $>\<$ this.filenameWithoutExtension $>\Pages;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use App\Filament\Resources\<$ this.crud.section.name $>\<$ this.filenameWithoutExtension $>\RelationManagers;
use Filament\Forms\Components\Grid;
use Filament\Forms\Components\Section;
<% for(let input of this.crud.inputs) { %>
use Filament\Forms\Components\<$ pascalCase(input.filamentData.inputType) $>;
use Filament\Tables\Columns\<$ pascalCase(input.filamentData.columnType) $>;
<% } %>

class <$ this.filenameWithoutExtension $> extends Resource
{
    protected static ?string $model = <$ this.crud.model.name $>::class;

    protected static ?string $navigationIcon = '<$ navigationIcon $>';

    <% if(this.crud.filamentSettings.recordTitle) { %>
    protected static ?string $recordTitleAttribute = '<$ this.crud.filamentSettings.recordTitle $>';
    <% } %>

    <% if(this.crud.filamentSettings.shouldSkipAuthorization) { %>
    protected static bool $shouldSkipAuthorization = '<$ this.crud.filamentSettings.shouldSkipAuthorization $>';
    <% } %>

    <% if(this.crud.filamentSettings.modelLabel) { %>
    protected static ?string $modelLabel = '<$ this.crud.filamentSettings.modelLabel $>';
    <% } %>
    
    <% if(this.crud.filamentSettings.pluralModelLabel) { %>
    protected static ?string $pluralModelLabel = '<$ this.crud.filamentSettings.pluralModelLabel $>';
    <% } %>
    
    <% if(this.crud.filamentSettings.navigationLabel) { %>
    protected static ?string $navigationLabel = '<$ this.crud.filamentSettings.navigationLabel $>';
    <% } %>

    <% if(this.crud.filamentSettings.navigationOrder) { %>
    protected static ?int $navigationSort = <$ this.crud.filamentSettings.navigationOrder $>;
    <% } %>

    <% if(this.crud.filamentSettings.navigationGroup) { %>
    protected static ?string $navigationGroup = '<$ this.crud.filamentSettings.navigationGroup $>';
    <% } %>

    <% if(this.crud.filamentSettings.slug && this.crud.filamentSettings.slug != pascalCase(this.crud.plural)) { %>
    protected static ?string $slug = '<$ this.crud.filamentSettings.slug $>';
    <% } %>

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Section::make()
                    ->schema([
                        Grid::make(['default' => 1])
                            ->schema([
                                <% for(let input of this.crud.getInputsForForms()) { %>
                                <###>
                                <% const inputRules = input.getRulesForFilamentTemplate() %>
                                <###>
                                <$ pascalCase(input.filamentData.inputType) $>::make('<$ input.name $>')
                                    <% for(let rule of inputRules) { %>
                                        <% const [methodName, args] = rule %>
                                        <# --- #>
                                        -><$ methodName $>(<$ args $>)
                                    <% } %>
                                    <# --- #>
                                    <% if(input.isEmail()) { %>
                                        ->email()
                                    <% } %>
                                    <# --- #>
                                    <% if(input.isPassword()) { %>
                                        ->password()
                                    <% } %>
                                    <# --- #>
                                    <% if(input.isNumber()) { %>
                                        ->numeric()
                                        ->step(<$ input.step $>)
                                    <% } %>
                                    <% if(!input.showOnCreation) { %>
                                        ->hiddenOn('create')
                                    <% } %>
                                    <# --- #>
                                    <% if(!input.showOnUpdate) { %>
                                        ->hiddenOn('edit')
                                    <% } %>
                                    <# --- #>
                                    <% if(input.filamentData.autofocus) { %>
                                        ->autofocus()
                                    <% } %>
                                    <# --- #>
                                    <% if(input.filamentData.helperText) { %>
                                        ->helperText('<$ input.filamentData.helperText $>')
                                    <% } %>
                                    <# --- #>
                                    <% if(!input.filamentData.autoComplete) { %>
                                        ->autocomplete(false)
                                    <% } %>
                                    <# --- #>
                                    <% if(input.filamentData.dataList && input.filamentData.dataList.length) { %>
                                        ->datalist([
                                            <% for(let option of input.filamentData.dataList) { %>
                                                '<$ option $>',
                                            <% } %>
                                        ])
                                    <% } %>,
                                    
                                <% } %>
                            ])
                    ])
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->poll('60s')
            ->columns([
                <% for(let input of this.crud.getInputsForIndex()) { %>
                <$ pascalCase(input.filamentData.columnType) $>::make('<$ input.name $>'),
                <% } %>
            ])
            ->filters([
                //
            ])
            ->actions([
                Tables\Actions\EditAction::make(),
                Tables\Actions\ViewAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\List<$ this.crud.plural $>::route('/'),
            'create' => Pages\Create<$ this.crud.name $>::route('/create'),
            'view' => Pages\View<$ this.crud.name $>::route('/{record}'),
            'edit' => Pages\Edit<$ this.crud.name $>::route('/{record}/edit'),
        ];
    }
}
