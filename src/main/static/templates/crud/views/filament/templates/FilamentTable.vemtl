<% const inputColumnData = input.filamentSettings.columnData %>
<% const columnName = !input.isBelongsTo() ? input.name : `${input.relationship.name}.${input.relationship.relatedModel.table.getLabelColumnName()}` %>
<###>
<$ pascalCase(inputColumnData.columnType) $>::make('<$ columnName $>')
    <% if(input.isImage() && input.filamentSettings.formData.disk) { %>
        ->disk('<$ input.filamentSettings.formData.disk $>')
    <% } %>
    <# --- #>
    <% if(input.isImage() && input.filamentSettings.formData.visibility) { %>
        ->visibility('<$ input.filamentSettings.formData.visibility $>')
    <% } %>
    <# --- #>
    <% if(input.isTextarea() || input.filamentSettings.columnData.textLimit) { %>
        ->limit(<$ input.filamentSettings.columnData.textLimit || 255 $>)
    <% } %>
    <# --- #>
    <% if(input.filamentSettings.formData.allowHtml) { %>
        ->html()
    <% } %>
    <# --- #>
    <% if(inputColumnData.description) { %>
        ->description('<$ inputColumnData.description $>')
    <% } %>
    <# --- #>
    <% if(inputColumnData.label) { %>
        ->label('<$ inputColumnData.label $>')
    <% } %>
    <# --- #>
    <% if(inputColumnData.canBeSortable) { %>
        ->sortable()
    <% } %>
    <# --- #>
    <% if(inputColumnData.canBeToggled) { %>
        ->toggleable()
    <% } %>
    <# --- #>
    <% if(inputColumnData.isMarkdown) { %>
        ->markdown()
    <% } %>
    <# --- #>
    <% if(inputColumnData.iconName) { %>
        ->icon('<$ inputColumnData.iconName $>')
        <###>
        <% if(inputColumnData.iconColor) { %>
            ->iconColor('<$ inputColumnData.iconColor $>')
        <% } %>
    <% } %>
    <# --- #>
    <% if(inputColumnData.canBeSearchable) { %>
        ->searchable()
    <% } %>
    <# --- #>
    <% if(inputColumnData.showAsNumeric) { %>
        ->numeric(
            <% if(inputColumnData.decimalPlaces) { %>
                decimalPlaces: <$ inputColumnData.decimalPlaces $>,
            <% } %>
            <###>
            <% if(inputColumnData.decimalSeparator) { %>
                decimalSeparator: '<$ inputColumnData.decimalSeparator $>',
            <% } %>
            <###>
            <% if(inputColumnData.thousandsSeparator) { %>
                thousandsSeparator: '<$ inputColumnData.thousandsSeparator $>',
            <% } %>
        )
    <% } %>
    <# --- #>
    <% if(inputColumnData.showAsBadge) { %>
        ->badge()
    <% } %>
    <# --- #>
    <% if(inputColumnData.badgeColors?.length) { %>
        ->color(fn (string $state): string => match ($state) {
            <###>
            <% for(let badgeColor of inputColumnData.badgeColors) { %>
                <% const badgeColorLabel = badgeColor.label === 'default' ? badgeColor.label : `'${badgeColor.label}'` %>
                <###>
                <$ badgeColorLabel $> => '<$ badgeColor.color $>',
            <% } %>
        })
    <% } %>
    <# --- #>
    <% if(inputColumnData.prefix) { %>
        ->prefix('<$ inputColumnData.prefix $>')
    <% } %>
    <# --- #>
    <% if(inputColumnData.suffix) { %>
        ->suffix('<$ inputColumnData.suffix $>')
    <% } %>
    <# --- #>
    <% if(input.isDateOrDateTime()) { %>
        ->since()
    <% } %>,
