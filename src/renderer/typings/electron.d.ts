declare global {
    interface Window {
        api: ElectronApi,
        licenseIsActive: () => boolean,
        showLicenseModal: (warningMessage?: string) => void,
        projectConfirm: (message?: string, title?: string, options?: any) => Promise<boolean>,
        aiConfirm: () => Promise<boolean>,
    }
}

/**
 * Should match main/preload.ts for typescript support in renderer
 */
export default interface ElectronApi {
    onDevelopment: () => boolean,
    isRecording: () => boolean,
    getBaseUrl: () => string,
    getAppVersion: () => Promise<string>,
    openIssue: (title: string, body: string) => Promise<void>,
    confirm: (message: string) => Promise<any>,
    openFolderDialog: () => Promise<string>,
    openURL: (url: string) => void,
    prepareProject: (path: string) => Promise<string>,
    loadSchema: (path: string) => Promise<any>,
    onDefaultError: (callback: Callback) => void,
    onModelDataUpdated: (callback: Callback) => void,
    onFilesChanged: (callback: Callback) => void,
    loadProjectDatabase: (path: string) => Promise<any>,
    closeProjectDatabase: () => Promise<void>,
    databaseDataUpdated: (data: any) => void,
    addFileToGenerationQueue: (filePath: string, content: string) => Promise<void>,
    readFile: (path: string) => Promise<string>,
    fileExists: (path: string) => Promise<boolean>,
    fixFolderPermissions: (path: string) => Promise<void>,
    folderExists: (path: string) => Promise<boolean>,
    readProjectFile: (path: string) => Promise<string>,
    writeProjectFile: (path: string, content: string) => Promise<void>,
    writeFile: (path: string, content: string) => Promise<void>,
    writeOnProjectVemtoLog: (content: string) => Promise<void>,
    projectFileExists: (path: string) => Promise<boolean>,
    projectFolderExists: (path: string) => Promise<boolean>,
    listTemplates: () => Promise<string[]>,
    readTemplateFile: (path: string) => Promise<string>,
    readOriginalTemplateFile: (path: string) => Promise<string>,
    writeTemplateFile: (path: string, content: string) => Promise<void>,
    getTemplateStatus: (path: string) => Promise<string>,
    saveCustomTemplate: (path: string, content: string) => Promise<void>,
    dropCustomTemplate: (path: string) => Promise<void>,
    publishTemplates: () => Promise<void>,
    openFolder: (path: string) => Promise<void>,
    openTerminal: (path: string) => Promise<void>,
    openProjectFile: (path: string) => Promise<void>,
    openProjectFolder: (path: string) => Promise<void>,
    clearProjectFolder: (path: string) => Promise<void>,
    openProjectFolderOnTerminal: (path: string) => Promise<void>,
    fileHasConflicts: (relativePath: string, newContent: string) => Promise<boolean>,
    readConflictsFile: (path: string) => Promise<string>,
    solveConflictReplacingCode: (fileId: string, conflictId: string, content: string) => Promise<void>,
    readProjectFolder: (path: string, removeBasePath?: boolean) => Promise<string[]>,
    readInternalFolder: (path: string, removeBasePath?: boolean) => Promise<string[]>,
    copyInternalFolderToProject: (path: string, destination: string) => Promise<void>,
    copyInternalFolderIfNotExists: (path: string, destination: string) => Promise<void>,
    mergePHPFile: (relativePath: string) => Promise<any>,
    phpIsInstalled: () => Promise<boolean>,
    getPhpInfo: () => Promise<string>,
    executePhpOnPath: (path: string, command: string) => Promise<string>,
    executePhpOnProject: (command: string) => Promise<string>,
    composerIsInstalled: () => Promise<boolean>,
    executeComposerOnPath: (path: string, command: string) => Promise<string>,
    executeComposerOnProject: (command: string) => Promise<string>,
    executeArtisanOnPath: (path: string, command: string) => Promise<string>,
    executeArtisanOnProject: (command: string) => Promise<string>,
    executeYarnOnPath: (path: string, command: string) => Promise<string>,
    executeYarnOnProject: (command: string) => Promise<string>,
}